/*
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not
 * distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

#pragma once

#include "CarbonEngine/Math/Vec3.h"
#include "CarbonEngine/Physics/PhysicsInterface.h"

namespace Carbon
{

/**
 * This class holds a single intersection result generated by a call to one of the ray intersection routines on the
 * PhysicsInterface class.
 */
class CARBON_API PhysicsIntersectResult
{
public:

    PhysicsIntersectResult() {}

    /**
     * Constructor that sets up this physics intersect result.
     */
    PhysicsIntersectResult(float distance, const Vec3& point, const Vec3& normal, PhysicsInterface::BodyObject body)
        : distance_(distance), point_(point), normal_(normal), body_(body)
    {
    }

    /**
     * Automatic boolean conversion that indicates whether this intersection result contains a valid intersection.
     */
    operator bool() const { return body_ != nullptr; }

    /**
     * Comparison operator that allows sorting by the intersection distance.
     */
    bool operator<(const PhysicsIntersectResult& other) const { return distance_ < other.distance_; }

    /**
     * Returns the intersection distance. This is the distance from the start of the ray to the intersection point.
     */
    float getDistance() const { return distance_; }

    /**
     * Returns the world space intersection point.
     */
    const Vec3& getPoint() const { return point_; }

    /**
     * Returns the world space surface normal at the intersection point.
     */
    const Vec3& getNormal() const { return normal_; }

    /**
     * Returns the phyics body that was intersected.
     */
    PhysicsInterface::BodyObject getBody() const { return body_; }

    /**
     * Returns a human-readable string describing this intersection result, this is useful when debugging.
     */
    operator UnicodeString() const
    {
        if (!body_)
            return "No intersection";

        return UnicodeString() << "Intersection at distance: " << distance_ << ", point: " << point_ << ", normal: " << normal_
                               << ", body: " << body_;
    }

private:

    float distance_ = 0.0f;
    Vec3 point_;
    Vec3 normal_;
    PhysicsInterface::BodyObject body_ = nullptr;
};

/**
 * This stream concatenation overload is required in order to be able to directly log a PhysicsIntersectResult instance, and is
 * needed because PhysicsIntersectResult has automatic conversions to both bool and String meaning the implicit conversion to a
 * StringBase<T> is ambiguous.
 */
template <typename T> StringBase<T>& operator<<(StringBase<T>& s, const PhysicsIntersectResult& result)
{
    return s << result.operator UnicodeString();
}

}

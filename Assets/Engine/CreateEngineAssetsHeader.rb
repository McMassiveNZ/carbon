#
# This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not
# distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

REPOSITORY_ROOT = File.expand_path File.join(File.dirname(__FILE__), '../..')

require 'erb'

# This script takes all the engine's core assets under this directory and converts them into a single C++ header file that is
# then included in the build of the engine. The generated source file makes all the core assets available on the virtual file
# system so that they are guaranteed to be present at runtime.
class EngineAssetsHeaderUpdater
  def run
    File.write output_header_file, ERB.new(DATA.read).result(binding)
  end

  private

  def output_header_file
    File.join REPOSITORY_ROOT, '/Source/CarbonEngine/EngineAssets.h'
  end

  def assets_root
    File.join REPOSITORY_ROOT, 'Assets/Engine'
  end

  def assets
    Dir.glob(File.join(assets_root, '**/*')).sort.select do |file|
      !File.directory?(file) && File.basename(file)[0] != '.' && File.basename(file) != 'CreateEngineAssetsHeader.rb'
    end
  end

  def relative_asset_name(asset)
    asset.gsub "#{assets_root}/", ''
  end

  FORMATTED_BYTE = (0..255).map { |n| format '%-5s', "#{n}," }

  def asset_bytes(asset)
    bytes = File.open(asset, 'rb').each_byte.to_a

    # Delete all CR characters in text files
    bytes.delete 13 if text_file? bytes

    bytes
  end

  def bytes_to_code(bytes)
    bytes.each_slice(23).map do |slice|
      slice.map { |b| FORMATTED_BYTE[b] }.join.gsub(/[ ,]*$/, '')
    end.join ",\n            "
  end

  def text_file?(bytes)
    ascii_byte_fraction(bytes[0...100]) > 0.9
  end

  def printable_ascii_byte?(byte)
    byte >= 32 && byte <= 126 || byte == 9 || byte == 10 || byte == 13
  end

  def ascii_byte_fraction(bytes)
    bytes.count { |byte| printable_ascii_byte? byte } / bytes.size.to_f
  end
end

EngineAssetsHeaderUpdater.new.run

__END__
/*
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not
 * distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

// This file was automatically generated by the Assets/Engine/CreateEngineAssetsHeader.rb script. It makes all the core assets
// available on the virtual file system by building them into the main engine binary. This means that there are no dependencies
// on external file system access in order to access core assets.

#include "CarbonEngine/Globals.h"
#include "CarbonEngine/Core/FileSystem/FileSystem.h"

namespace Carbon
{

static void createEngineAssets()
{
<% assets.each do |asset| %>
    {
        auto data = std::array<byte_t, <%= bytes = asset_bytes(asset); bytes.size %>>{{
            <%= bytes_to_code bytes %>
        }};

        fileSystem().addVirtualFile("<%= relative_asset_name asset %>", data.data(), data.size());
    }
<% end %>
}
CARBON_REGISTER_STARTUP_FUNCTION(createEngineAssets, 0)

}
